coronavirus
install.packages("coronavirus")
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
install.packages("coronavirus")
devtools::install_github("covid19r/coronavirus")
install.packages("glue")
install.packages("glue")
devtools::install_github("covid19r/coronavirus")
devtools::install_github("covid19r/coronavirus")
library("coronavirus")
data("coronavirus")
head(coronavirus)
library(tidyr)
coronavirus %>%
filter(date == max(date)) %>%
select(country = Country.Region, type, cases) %>%
group_by(country, type) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = total_cases) %>%
arrange(-confirmed)
coronavirus %>%
filter(date == date) %>%
select(country = Country.Region, type, cases) %>%
group_by(country, type) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = total_cases) %>%
arrange(-confirmed)
coronavirus %>%
filter(date == date()) %>%
select(country = Country.Region, type, cases) %>%
group_by(country, type) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = total_cases) %>%
arrange(-confirmed)
coronavirus %>%
filter(date == date()) %>%
select(country = Country.Region, type, cases) %>%
group_by(country, type) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = total_cases) %>%
arrange(-confirmed)
coronavirus %>%
filter(date == max(date)) %>%
select(country = Country.Region, type, cases) %>%
group_by(country, type) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type,
values_from = total_cases) %>%
arrange(-confirmed)
library(dplyr)
summary_df <- coronavirus %>% group_by(Country.Region, type) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
summary_df %>% head(100)
coronavirus::coronavirus
View(coronavirus)
filter(coronavirus, Country.Region == "India")
filter(coronavirus, type == "recovered" , Country.Region == "Mainland China")
view(filter(coronavirus, type == "recovered" , Country.Region == "Mainland China"))
x = filter(coronavirus, type == "recovered" , Country.Region == "Mainland China")
View(x)
x = filter(coronavirus, type == "recovered" , Country.Region == "India")
View(x)
setwd("D:/R_Prog/Experiment 08")
# Loading funModeling!
library(funModeling)
# Loading funModeling!
install.packages("funModeling")
library(funModeling)
library(dplyr)
data(heart_disease)
heart_disease
view(heart_disease)
data_set <- heart_disease
view(heart_disease)
view(iris)
library(dplyr)
view(iris)
View(data_set)
# Profiling the data input
df_status(heart_disease)
# Profiling the Data Input
my_data_status=df_status(heart_disease, print_results = F)
# Removing variables with 60% of zero values
vars_to_remove=filter(my_data_status, p_zeros > 60)  %>% .$variable
vars_to_remove
# Keeping all columns except the ones present in 'vars_to_remove' vector
heart_disease_2=select(heart_disease, -one_of(vars_to_remove))
arrange(my_data_status, -p_zeros) %>% select(variable, q_zeros, p_zeros)
# Total rows
nrow(heart_disease)
# Total columns
ncol(heart_disease)
# Column names
colnames(heart_disease)
freq(data=heart_disease, input = c('thal','chest_pain'))
warning()
warnings()
# Just keeping two variables to use in this example
heart_disease_3=select(heart_disease, thal, chest_pain)
# Profiling the data!
describe(heart_disease_3)
library(Hmisc)
# Loading data from the book repository without altering the format
data_world=read.csv(file = "https://goo.gl/2TrDgN", header = T, stringsAsFactors = F, na.strings = "..")
# Excluding missing values in Series.Code. The data downloaded from the web page contains four lines with "free-text" at the bottom of the file.
data_world=filter(data_world, Series.Code!="")
# The magical function that keeps the newest values for each metric. If you're not familiar with R, then skip it.
max_ix<-function(d)
{
ix=which(!is.na(d))
res=ifelse(length(ix)==0, NA, d[max(ix)])
return(res)
}
data_world$newest_value=apply(data_world[,5:ncol(data_world)], 1, FUN=max_ix)
# Printing the first three rows
head(data_world, 3)
View(data_world)
# Get the list of indicator descriptions.
names=unique(select(data_world, Series.Name, Series.Code))
head(names, 5)
# Convert a few
df_conv_world=data.frame(
new_name=c("urban_poverty_headcount",
"rural_poverty_headcount",
"gini_index",
"pop_living_slums",
"poverty_headcount_1.9"),
Series.Code=c("SI.POV.URHC",
"SI.POV.RUHC",
"SI.POV.GINI",
"EN.POP.SLUM.UR.ZS",
"SI.POV.DDAY"),
stringsAsFactors = F)
# adding the new indicator value
data_world_2 = left_join(data_world,
df_conv_world,
by="Series.Code",
all.x=T)
data_world_2 =
mutate(data_world_2, Series.Code_2=
ifelse(!is.na(new_name),
as.character(data_world_2$new_name),
data_world_2$Series.Code)
)
data_world_2 =
mutate(data_world_2, Series.Code_2=
ifelse(!is.na(new_name),
as.character(data_world_2$new_name),
data_world_2$Series.Code)
)
# The package 'reshape2' contains both 'dcast' and 'melt' functions
library(reshape2)
data_world_wide=dcast(data_world_2, Country.Name  ~ Series.Code_2, value.var = "newest_value")
# Printing the first three rows
head(data_world_wide, 3)
library(Hmisc) # contains the `describe` function
vars_to_profile=c("gini_index", "poverty_headcount_1.9")
data_subset=select(data_world_wide, one_of(vars_to_profile))
describe(data_subset)
library(funModeling)
# Full numerical profiling in one function automatically excludes non-numerical variables
profiling_num(data_world_wide)
plot_num(data_world_wide)
# Loading needed libraries
library(funModeling) # contains heart_disease data
library(minerva) # contains MIC statistic
install.packages("minerva")
library(minerva) # contains MIC statistic
library(ggplot2)
library(dplyr)
library(reshape2)
library(gridExtra) # allow us to plot two plots in a row
options(scipen=999) # disable scientific notation
correlation_table(data=heart_disease, target="has_heart_disease")
# Reading anscombe quartet data
anscombe_data =
read.delim(file="https://goo.gl/mVLz5L", header = T)
# calculating the correlation (R squared, or R2) for
#every pair, every value is the same: 0.86.
cor_1 = cor(anscombe_data$x1, anscombe_data$y1)
cor_2 = cor(anscombe_data$x2, anscombe_data$y2)
cor_3 = cor(anscombe_data$x3, anscombe_data$y3)
cor_4 = cor(anscombe_data$x4, anscombe_data$y4)
# defining the function
plot_anscombe <- function(x, y, value, type)
{
# 'anscombe_data' is a global variable, this is
# a bad programming practice ;)
p=ggplot(anscombe_data, aes_string(x,y))  +
geom_smooth(method='lm', fill=NA) +
geom_point(aes(colour=factor(1),
fill = factor(1)),
shape=21, size = 2
) +
ylim(2, 13) +
xlim(4, 19) +
theme_minimal() +
theme(legend.position="none") +
annotate("text",
x = 12,
y =4.5,
label =
sprintf("%s: %s",
type,
round(value,2)
)
)
return(p)
}
# plotting in a 2x2 grid
grid.arrange(plot_anscombe("x1", "y1", cor_1, "R2"),
plot_anscombe("x2", "y2", cor_2, "R2"),
plot_anscombe("x3", "y3", cor_3, "R2"),
plot_anscombe("x4", "y4", cor_4, "R2"),
ncol=2,
nrow=2)
x=seq(0, 20, length.out=500)
df_exp=data.frame(x=x, y=dexp(x, rate=0.65))
ggplot(df_exp, aes(x=x, y=y)) + geom_line(color='steelblue') + theme_minimal()
# Calculating linear correlation
res_cor_R2=cor(df_exp)[1,2]^2
sprintf("R2: %s", round(res_cor_R2,2))
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
# selecting just a few variables
heart_disease_2 =
select(heart_disease, max_heart_rate, oldpeak,
thal, chest_pain,exer_angina, has_heart_disease)
# this conversion from categorical to a numeric is merely
# to have a cleaner plot
heart_disease_2$has_heart_disease=
ifelse(heart_disease_2$has_heart_disease=="yes", 1, 0)
# it converts all categorical variables (factor and
# character for R) into numerical variables.
# skipping the original so the data is ready to use
dmy = dummyVars(" ~ .", data = heart_disease_2)
heart_disease_3 =
data.frame(predict(dmy, newdata = heart_disease_2))
# Important: If you recieve this message
# `Error: Missing values present in input variable 'x'.
# Consider using use = 'pairwise.complete.obs'.`
# is because data has missing values.
# Please don't omit NA without an impact analysis first,
# in this case it is not important.
heart_disease_4=na.omit(heart_disease_3)
# compute the mic!
mine_res_hd=mine(heart_disease_4)
mine_res_hd$MIC[1:5,1:5]
# library wto plot that matrix
library(corrplot)
# library wto plot that matrix
install.packages("corrplot")
library(corrplot)
# to use the color pallete brewer.pal
library(RColorBrewer)
# hack to visualize the maximum value of the
# scale excluding the diagonal (variable against itself)
diag(mine_res_hd$MIC)=0
# Correlation plot with circles.
corrplot(mine_res_hd$MIC,
method="circle",
col=brewer.pal(n=10, name="PuOr"),
# only display upper diagonal
type="lower",
#label color, size and rotation
tl.col="red",
tl.cex = 0.9,
tl.srt=90,
# dont print diagonal (var against itself)
diag=FALSE,
# accept a any matrix, mic in this case
#(not a correlation element)
is.corr = F
)
# Correlation plot with color and correlation MIC
corrplot(mine_res_hd$MIC,
method="color",
type="lower",
number.cex=0.7,
# Add coefficient of correlation
addCoef.col = "black",
tl.col="red",
tl.srt=90,
tl.cex = 0.9,
diag=FALSE,
is.corr = F
)
cross_plot(heart_disease, input = "chest_pain", target = "has_heart_disease", plot_type = "percentual")
setwd("D:/R_Prog/Experiment 09")
View(heart_disease_2)
View(heart_disease_2)
View(heart_disease_3)
View(heart_disease_3)
View(heart_disease_4)
View(heart_disease_4)
View(mine_res_hd)
View(mine_res_hd)
View(my_data_status)
View(my_data_status)
View(names)
View(names)
View(summary_df)
View(max_ix)
View(max_ix)
View(plot_anscombe)
View(plot_anscombe)
mtcars
to_correlate <- mtcars %>% dplyr::select(qsec, cyl, disp, hp)
cor(to_correlate)
cor.test(mtcars$qsec, mtcars$cyl)
cor.test(mtcars$qsec, mtcars$cyl, conf.level = 0.9)
ggplot(to_correlate, aes(x=cyl, y=qsec)) + geom_jitter(width=0.1) + stat_smooth(method="lm", se=FALSE)
Hmisc::rcorr(to_correlate %>% as.matrix())
stargazer(cor(to_correlate), type = "html")
install.packages("stargazer")
library(stargazer)
stargazer(cor(to_correlate), type = "html")
stargazer(cor(to_correlate), type = "html")
apaTables::apa.cor.table(to_correlate)
install.packages("apaTables")
library(apaTables)
apaTables::apa.cor.table(to_correlate)
ctest <- cor.test(mtcars$qsec, mtcars$cyl)
str(ctest)
ctest$p.value
ctest$estimate
broom::glance(ctest)
cor.test(mtcars$qsec, mtcars$cyl, method = "spearman")
cor(to_correlate, method = "spearman")
to_correlate_miss <- to_correlate
to_correlate_miss$qsec[c(1, 5)] <- NA
cor(to_correlate_miss) #implicitly use="everything"
cor(to_correlate_miss, use="pairwise.complete.obs")
cars
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='darkblue', size = 3) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='black', size=1.2) +
labs(x="Speed (mph)", y="Stopping distance (ft)")
lm_cars <- lm(dist ~ speed, data=cars)
summary(lm_cars)
plot(lm_cars)
autoplot(lm_cars)
rlang::last_error()
library(autoplot)
autoplot(lm_cars)
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
install.packages("boot")
library(boot)
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
install.packages("Boot")
system.time(lm_cars.boot <- boot(lm_cars, R=2000))
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
system.time(lm_cars.boot <- boot(lm_cars, R=2000))
install.packages("boot",dep=TRUE)
install.packages("boot", dep = TRUE)
library(boot)
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
summary(lm_cars.boot, high.moments=TRUE)
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
install.packages("boot",dep=TRUE)
install.packages("boot",dep=TRUE)
library(boot)
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
lm_cars <- lm(dist ~ speed, data=cars)
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
.carEnv <- car:::.carEnv
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
hist(lm_cars, legend="separate")
system.time(lm_cars.boot <- Boot(lm_cars, R=2000))
bs <-  function(formula,data,indices){
d <- data[indices,]
fit <- lm(formula,data=d)
return(coef(fit))
}
lm_cars.boot <- boot(data=mtcars,statistic=bs,R=2000,formula=mpg~disp+wt)
summary(lm_cars.boot, high.moments=TRUE)
confint(lm_cars.boot, level=.95, type="bca")
hist(lm_cars.boot, legend="separate")
mpg_model <- lm(mpg ~ hp + am, mtcars)
summary(mpg_model)
ggplot(mtcars, aes(x=hp, y=mpg, color=factor(am))) + geom_point() + stat_smooth(method=lm, se=FALSE)
library(ggplot2)
ggplot2(mtcars, aes(x=hp, y=mpg, color=factor(am))) + geom_point() + stat_smooth(method=lm, se=FALSE)
library(ggplot)
ggplot(to_correlate, aes(x=cyl, y=qsec)) + geom_jitter(width=0.1) + stat_smooth(method="lm", se=FALSE)
to_correlate <- mtcars %>% dplyr::select(qsec, cyl, disp, hp)
cor(to_correlate)
cor.test(mtcars$qsec, mtcars$cyl)
cor.test(mtcars$qsec, mtcars$cyl, conf.level = 0.9)
ggplot(to_correlate, aes(x=cyl, y=qsec)) + geom_jitter(width=0.1) + stat_smooth(method="lm", se=FALSE)
install.packages("ggplot")
library(ggplot2)
ggplot(mtcars, aes(x=hp, y=mpg, color=factor(am))) + geom_point() + stat_smooth(method=lm, se=FALSE)
ggplot2(mtcars, aes(x=hp, y=mpg, color=factor(am))) + geom_point() + stat_smooth(method=lm, se=FALSE)
remove.packages("ggplot2") # Unisntall ggplot
remove.packages("ggplot2") # Unisntall ggplot
install.packages("ggplot2")
library(ggplot2)
ggplot2(mtcars, aes(x=hp, y=mpg, color=factor(am))) + geom_point() + stat_smooth(method=lm, se=FALSE)
ggplot(mtcars, aes(x=hp, y=mpg, color=factor(am))) + geom_point() + stat_smooth(method=lm, se=FALSE)
broom::glance(mpg_model)
broom::tidy(mpg_model)
int_model <- lm(mpg ~ hp*wt + am, mtcars)
summary(int_model)
#handy 2-way interation plotting function from jtools.
interact_plot(int_model, pred = "hp", modx = "wt")
install.packages("Interact")
library(Interact)
#handy 2-way interation plotting function from jtools.
interact_plot(int_model, pred = "hp", modx = "wt")
install.packages("jtools")
library(jtools)
#handy 2-way interation plotting function from jtools.
interact_plot(int_model, pred = "hp", modx = "wt")
devtools::install_github("jacob-long/jtools")
remove.packages("rlang")
devtools::install_github("jacob-long/jtools")
install.packages("jtools")
install.packages("jtools")
library(jtools)
#handy 2-way interation plotting function from jtools.
interact_plot(int_model, pred = "hp", modx = "wt")
install.packages("interactions")
install.packages("interactions")
library(interactions)
install.packages("interactions")
install.packages("interactions")
#handy 2-way interation plotting function from jtools.
interact_plot(int_model, pred = "hp", modx = "wt")
install.packages("interactions")
install.packages("interactions")
library(interactions)
interact_plot(int_model, pred = "hp", modx = "wt")
data(pigs, package="emmeans")
install.packages("emmeans")
library(emmeans)
data(pigs, package="emmeans")
pigs <- pigs %>% mutate(log_conc=log(conc), percent_fac=factor(percent))
library(dplyr)
pigs <- pigs %>% mutate(log_conc=log(conc), percent_fac=factor(percent))
pigs.lm <- lm(log_conc ~ source + percent_fac, data = pigs)
summary(pigs.lm)
pigs.emm.s <- emmeans(pigs.lm, "source")
print(pigs.emm.s)
pigs.emm.p <- emmeans(pigs.lm, "percent_fac")
print(pigs.emm.p)
print(emmeans(pigs.lm, ~source*percent_fac))
plot(pigs.emm.s, comparisons = TRUE)
