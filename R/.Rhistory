rm(list = ls(all.names = TRUE)) # Clear environment
folder_current <- "D:/Courses/R"; setwd(folder_current); set.seed(123)
library(data.table)
source("CommonUtils.R")
#par(mar=c(2,2,1,1));
# Constants
g_folderImage = "./Images/"
############## BASIC R WITH DATA TABLE ######################################
# Read data
train <- fread(input = "./data/mpg.csv")
############### Load Library ###############################################
rm(list = ls(all.names = TRUE)) # Clear environment
folder_current <- "D:/Courses/R"; setwd(folder_current); set.seed(123)
library(data.table)
source("CommonUtils.R")
# Constants
g_folderImage = "./Images/"
############## BASIC R WITH DATA TABLE ######################################
# Read data
train <- fread(input = "./data/mpg.csv")
names(train) <- toupper(names(train))
head(train,2);
# First view
dim(train)
str(train)
head(train,2)
summary(train)
# Constants
catColumns = 'ORIGIN'; strResponse = 'MPG'
# Change data types
train[,catColumns] <- lapply(train[,catColumns, with = F], function(x) as.factor(x))
# Data Extraction.
train[1,MPG]
train[1,'MPG', with = F]
train[,MPG]
train[,'MPG', with = F]
train[['MPG']]
#Add columns in data table
train[,MYCOLUMN:= 1]
head(train,2)
#Update columns in data table
train[,('MYCOLUMN2'):= 2]
head(train,2)
#Delete columns in data table
train[,c('MYCOLUMN', 'MYCOLUMN2'):= NULL]
head(train,2)
#Search and replace using grep and gsub
train$ORIGIN_TEMP <- train$ORIGIN
grep('American', train$ORIGIN_TEMP)
train$ORIGIN_TEMP <- gsub('American', 'American_New', train$ORIGIN_TEMP)
train$ORIGIN_TEMP
train$ORIGIN_TEMP <- NULL
# Description: This provides data dictioery for given data table.
dt <- GetDataDictionary(train); dt[, c('MissingCount', 'PercentageMissing') := NULL]
fwrite(dt, "train_DataDictionary.csv", row.names = F)
############## Apply functions #####################
# List returns
list_numeric_cols <- setdiff(names(train),catColumns)
train[,list_numeric_cols] <- lapply(train[,list_numeric_cols, with = F], function(x) as.numeric(x))
# Vector return
mean_all_col <- sapply(train[,list_numeric_cols, with = F], mean)
# For each row
sum_all_row <- apply(train[,list_numeric_cols, with = F], 1, sum)
# For each col
mean_all_col_2 <- apply(train[,list_numeric_cols, with = F], 2, mean)
# equality
all.equal(mean_all_col, mean_all_col_2)
############## Feature Transformation #####################################
head(train)
unique(train$YEAR)
############## Feature Transformation #####################################
head(train)
unique(train$YEAR)
# Create new feature with year with two groups - less than 75 and greater than 75
train[, YEAR_GRP := ifelse(YEAR <= 75, "<=75", ">75")]
train$YEAR_GRP_2 <- ifelse(train$YEAR <= 75, "<=75", ">75")
head(train, 5)
# Remove temp columns
train$YEAR_GRP <- NULL; train$YEAR_GRP_2 <- NULL;
head(train, 5)
############## Handle Missing Data #######################################
# Is there any missing data anywhere
anyNA(train)
