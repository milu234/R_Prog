setwd("D:/R_Prog/Experiment 05")
install.packages("dplyr")
library(dplyr)
library(nycflights13)
library(tidyverse)
datasets::AirPassengers
nycflights13::flights
install.packages("nycflights13")
nycflights13::flights
flights
flights()
install.packages("tidyverse")
library(dplyr)
library(nycflights13)
library(tidyverse)
library(tidyverse)
nycflights13::flights
flights
view(flights)
filter(flights, month == 1 ,day == 1)
filter(flights, month > 1 , year > 2013 , day > 1)
filter(flights, dep_time > 600 , arr_time < 800)
#Logical Operators
filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11, 12))
nov_dec
view(nov_dec)
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
#Arrange with Rows
arrange(flights,year,month,day)
#Use desc() to re-order by a column in descending order:
arrange(flights, desc(dep_delay))
# Select columns by name
select(flights, year, month, day)
#select columns by day and year(inclusive)
select(flights, year:day)
#select columns except  day and year
select(flights, -(year:day))
rename(flights, tail_num = tailnum)
#Another option is to use select() in conjunction with the everything() helper. This is useful if you have a handful of variables youâ€™d like to move to the start of the data frame.
select(flights, time_hour, air_time, everything())
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
#Mutatte
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
#Mutate and modify with new columns
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
transmute(flights,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
#Operations
transmute(flights,
dep_time,
hour = dep_time %/% 100,
minute = dep_time %% 100
)
#The last key verb is summarise(). It collapses a data frame to a single row:
summarise(flights)
#The last key verb is summarise(). It collapses a data frame to a single row:
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
#Combining multiple operations with the pipe
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
setwd("D:/R_Prog/Experiment 06")
data("airquality")
airquality
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
library(magrittr)
library(leaflet)
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
install.packages("devtools")
install.packages("devtools")
library(leaflet)
install.packages("leaflet")
library(magrittr)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=77.2310, lat=28.6560, popup="The delicious food of chandni chowk")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=72.3256, lat=19.2364, popup="The delicious food of chandni chowk")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=71.3256, lat=19.2364, popup="The delicious food of chandni chowk")
m  # Print the map
str(airquality)
head(airquality, 5)
tail(airquality, 5)
summary(airquality)
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality)
# points and lines
plot(airquality$Ozone, type= "b")
# high density vertical lines.
plot(airquality$Ozone, type= "h")
plot(airquality$Ozone, xlab = 'ozone Concentration', ylab = 'No of Instances', main = 'Ozone levels in NY city', col = 'green')
plot(airquality$Ozone, xlab = 'ozone Concentration', ylab = 'No of Instances', main = 'Ozone levels in NY city', col = 'green' ,type = 'h')
# Horizontal bar plot
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col= 'green',horiz = TRUE)
hist(airquality$Solar.R)
hist(airquality$Solar.R, main = 'Solar Radiation values in air',xlab = 'Solar rad.', col='blue')
hist(airquality$Solar.R, main = 'Solar Radiation values in air',xlab = 'Solar rad.', col='#111000')
hist(airquality$Solar.R, main = 'Solar Radiation values in air',xlab = 'Solar rad.', col='#448585')
#Single box plot
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main='Multiple Box plots')
boxplot(airquality[,0:4], main='Multiple Box plots')
boxplot(airquality$Solar.R)
par(mfrow=c(3,3), mar=c(2,5,2,1), las=1, bty="n")
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone, type= "c")
plot(airquality$Ozone, type= "s")
plot(airquality$Ozone, type= "h")
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='green',horiz = TRUE)
hist(airquality$Solar.R)
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main='Multiple Box plots')
# Installing & Loading the package
install.packages("lattice")
install.packages("lattice")
library(lattice)
#Loading the dataset
attach(mtcars)
# Exploring the dataset
head(mtcars)
densityplot(~mpg, main="Density Plot",  xlab="Miles per Gallon")
gear_factor<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl_factor <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
densityplot(~mpg, main="Density Plot",  xlab="Miles per Gallon")
library(lattice)
densityplot(~mpg, main="Density Plot",  xlab="Miles per Gallon")
require(tigerstats)
# Installing & Loading the package
install.packages("lattice")
# Installing & Loading the package
install.packages("lattice")
install.packages("lattice")
library(lattice)
densityplot(~mpg, main="Density Plot",  xlab="Miles per Gallon")
#Loading the dataset
attach(mtcars)
gear_factor<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl_factor <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
densityplot(~mpg, main="Density Plot",  xlab="Miles per Gallon")
splom(mtcars[c(1,3,4,5,6)], main="MTCARS Data")
xyplot(mpg~wt|cyl_factor*gear_factor,
main="Scatterplots : Cylinders and Gears",
ylab="Miles/Gallon", xlab="Weight of Car")
install.packages("ggplot2")
library(ggplot2)
#Loading the dataset
attach(mtcars)
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears", "4gears", "5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg)) + geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, color = as.factor(cyl))) + geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, size = qsec)) + geom_point()
p + geom_point(aes(colour  =  factor(cyl)), size  =  4) + geom_point(colour  =  "grey90", size  =  1.5)
p  <-  ggplot(mtcars,aes(mpg, wt, shape  =  factor(cyl)))
p + geom_point(aes(colour  =  factor(cyl)), size  =  4) + geom_point(colour  =  "grey90", size  =  1.5)
install.packages("plotly")
library(plotly)
install.packages("plotly")
install.packages("Rcpp")
install.packages("plotly")
library(plotly)
library(plotly)
p <- plot_ly(data = mtcars, x = ~hp, y = ~wt)
p
p <- plot_ly(data = mtcars, x = ~hp, y = ~wt, marker = list(size = 10, color = 'rgba(255, 182, 193, .9)', line = list(color = 'rgba(152, 0, 0, .8)', width = 2)))
p
#***********************************************************************
data1 <- rnorm(100, mean = 10)
data2 <- rnorm(100, mean = 0)
data3 <- rnorm(100, mean = -10)
x <- c(1:100)
data <- data.frame(x, data1, data2, data3)
p <- plot_ly(data, x = ~x)%>%
add_trace(y = ~data1, name = 'data1',mode = 'lines')%>%
add_trace(y = ~data2, name = 'data2', mode = 'lines+markers')%>%
add_trace(y = ~data3, name = 'data3', mode = 'markers')
p <- plot_ly(data, x = ~x)%>%
add_trace(y = ~data1, name = 'data1',mode = 'lines')%>%
add_trace(y = ~data2, name = 'data2', mode = 'lines+markers')%>%
add_trace(y = ~data3, name = 'data3', mode = 'markers')
p <- plot_ly(data, x = ~x)%>%
add_trace(y = ~data1, name = 'data1',mode = 'lines')%>%
add_trace(y = ~data2, name = 'data2', mode = 'lines+markers')%>%
add_trace(y = ~data3, name = 'data3', mode = 'markers')
p <- plot_ly(data, x = ~x)%>%
add_trace(y = ~data1, name = 'data1',mode = 'lines')%>%
add_trace(y = ~data2, name = 'data2', mode = 'lines+markers')%>%
add_trace(y = ~data3, name = 'data3', mode = 'markers')
p
p <- plot_ly(data = mtcars, x =~hp, y = ~wt,color = ~hp, size = ~hp )
p
#*************************************************************************
ggplot(data = world) +
geom_sf() +
coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
#*************************************************************************
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
install.packages("rgeos")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf()
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
#*****************************************************************************
ggplot(data = world) +
geom_sf() +
coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
#**************************************************************************
library (readr)
urlfile="Visualisation geographical data/ABC_locations.csv"
mydata<-read_csv(url(urlfile))
#**************************************************************************
library (readr)
mydata<-read_csv(url(urlfile))
#**************************************************************************
library(RCurl)
#**************************************************************************
install.packages("RCurl")
library(RCurl)
data <- getURL("https://raw.githubusercontent.com/parulnith/Data-Visualisation-with-R/master/Visualisation%20geographical%20data/ABC_locations.csv",
ssl.verifypeer=0L, followlocation=1L)
data_abc <- getURL("https://raw.githubusercontent.com/parulnith/Data-Visualisation-with-R/master/Visualisation%20geographical%20data/ABC_locations.csv",
ssl.verifypeer=0L, followlocation=1L)
data_abc
head(data_abc)
head(data_abc)
writeLines(data_abc,'ABC.csv')
setwd("D:/R_Prog/Experiment 06")
writeLines(data_abc,'ABC.csv')
read.csv('ABC.csv')
data_abc
actual <- read.csv('ABC.csv')
actual
head(actual)
data <- read.csv('ABC.csv')
data
plot(data$Longitude,data$Latitude)
# Install package
install.packages("maps", dependencies=TRUE)
# Loading the installed maps package
library(maps)
map(database="state")
symbols(data$Longitude, data$Latitude, squares =rep(1, length(data$Longitude)), inches=0.03, add=TRUE)
map(database="city")
map(database="country")
map(database="state")
symbols(data$Longitude, data$Latitude, squares =rep(1, length(data$Longitude)), inches=0.03, add=TRUE)
map(database="state")
symbols(data$Longitude, data$Latitude,bg = 'red', fg = 'red', squares =rep(1, length(data$Longitude)), inches=0.03, add=TRUE)
head(iris)
install.packages("rgl")
library("rgl")
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
spheres3d(x, y = NULL, z = NULL, radius = 1, ...)
rgl.open()# Open a new RGL device
rgl.bg(color = "white") # Setup the background color
rgl.spheres(x, y, z, r = 0.2, color = "grey")
library("RColorBrewer")
cols <- get_colors(iris$Species, brewer.pal(n=3, name="Dark2") )
library(RColorBrewer)
get_colors <- function(groups, group.col = palette()){
groups <- as.factor(groups)
ngrps <- length(levels(groups))
if(ngrps > length(group.col))
group.col <- rep(group.col, ngrps)
color <- group.col[as.numeric(groups)]
names(color) <- as.vector(groups)
return(color)
}
library("RColorBrewer")
cols <- get_colors(iris$Species, brewer.pal(n=3, name="Dark2") )
rgl_init()
rgl_init <- function(new.device = FALSE, bg = "white", width = 640) {
if( new.device | rgl.cur() == 0 ) {
rgl.open()
par3d(windowRect = 50 + c( 0, 0, width, width ) )
rgl.bg(color = bg )
}
rgl.clear(type = c("shapes", "bboxdeco"))
rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = cols)
rgl_add_axes(x, y, z, show.bbox = TRUE)
rgl_add_axes <- function(x, y, z, axis.col = "grey",
xlab = "", ylab="", zlab="", show.plane = TRUE,
show.bbox = FALSE, bbox.col = c("#333377","black"))
{
lim <- function(x){c(-max(abs(x)), max(abs(x))) * 1.1}
# Add axes
xlim <- lim(x); ylim <- lim(y); zlim <- lim(z)
rgl.lines(xlim, c(0, 0), c(0, 0), color = axis.col)
rgl.lines(c(0, 0), ylim, c(0, 0), color = axis.col)
rgl.lines(c(0, 0), c(0, 0), zlim, color = axis.col)
# Add a point at the end of each axes to specify the direction
axes <- rbind(c(xlim[2], 0, 0), c(0, ylim[2], 0),
c(0, 0, zlim[2]))
rgl.points(axes, color = axis.col, size = 3)
# Add axis labels
rgl.texts(axes, text = c(xlab, ylab, zlab), color = axis.col,
adj = c(0.5, -0.8), size = 2)
# Add plane
if(show.plane)
xlim <- xlim/1.1; zlim <- zlim /1.1
rgl.quads( x = rep(xlim, each = 2), y = c(0, 0, 0, 0),
z = c(zlim[1], zlim[2], zlim[2], zlim[1]))
# Add bounding box decoration
if(show.bbox){
rgl.bbox(color=c(bbox.col[1],bbox.col[2]), alpha = 0.5,
emission=bbox.col[1], specular=bbox.col[1], shininess=5,
xlen = 3, ylen = 3, zlen = 3)
}
}
rgl_add_axes(x, y, z, show.bbox = TRUE)
aspect3d(1,1,1)
install.packages("tigerstats")
url = "http://courses.washington.edu/b517/Datasets/MRI.txt"
download.file(url, destfile, method, quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL, ...)
download.file(url, destfile, method, quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"),
headers = NULL)
